========
编辑器
========

编辑器的重要性
==============
作为一个程序员，要花费大量的时间在写代码上，工欲善其事，必先利其器，选择一个合适的代码编辑器可以极大地提高工作效率，对程序员来说是非常重要的。

程序员在使用代码编辑器写代码时需要在不同的文件间切换、阅读、修改、运行和调试代码，而不是像文字写作者一样使用文档编辑器写大段文字，使用需求的不同导致代码编辑器和文档编辑器有很大的不同。

编辑器选择
=============
那该选择哪个编辑器完成日常的代码编辑任务呢？ `stackoverflow调查 <https://survey.stackoverflow.co/2023/#section-most-popular-technologies-other-tools>`_ 显示 `Visual Studio Code <https://code.visualstudio.com/>`_ 是目前最流行的代码编辑器，2023年被调查的程序员中有70%的程序员在使用它进行代码编辑工作。Vscode是图形化编辑器的代表，但是大部分程序员也常工作在命令行环境下，尤其是面向后端和运维工程师，而基于命令行的编辑器 `Vim <https://www.vim.org/>`_ 通常是这些程序员的首选。

编辑器学习
=============
选择一个合适的编辑器后，如何学习编辑器的使用是一个很重要的问题，通常情况下学习使用一个新编辑器包含以下步骤：

- 阅读教程
- 坚持使用它完成日常所有的编辑工作
- 随时查阅手册，思考更灵活更方便的使用方法

上面的步骤中最重要的是坚持使用新编辑器完成所有的编辑工作，当使用累积达到一定时间后，形成肌肉记忆，你将完全掌握新编辑器的使用，提高工作效率。

Vim
==========
后文主要以Vim为主，介绍Vim编辑器的使用。Vim是Linux系统上一款历史悠久的编辑器，始于1976年的Vi编辑器，Linux系统用户可以通过相应发行版的包管理软件安装Vim。现代程序编辑器大部分都支持Vim使用模式。

Vim哲学
==========
Vim采用模式编辑的设计理念，它提供了多种模式包括 **正常模式** 、 **命令模式** 、 **插入模式** 和 **可视模式** 以满足程序员在开发过程中不同的使用需求，比如在正常模式可以阅读代码并防止误触造成错误；在命令模式下可执行Vim命令，保存文件或替换字符等；在插入模式下可以向文件缓冲区输入文本，编辑修改代码；在可视模式下可以选择行或块（可以选择文本的矩形框）。

Vim的界面可以看成是一种编程语言，输入的操作是命令，不同的命令可以组合，提升移动和编辑效率。

Vim避免使用鼠标，甚至避免使用上下左右键因为操作不在主键盘区的键需要太多的手指移动。

Vim是程序员为程序员设计的代码编辑器，Vim的设计哲学更适合程序员编写代码。

Vim使用
==========

基础命令
----------

正常模式
**********
在正常模式下，大部分时间用来浏览文件，阅读代码。此时需要在文档中频繁移动，Vim提供了移动命令。

- h（光标左移）、j（光标下移）、k（光标上移）、l（光标右移）
- w（下一个词），b（词头），e（词尾）
- 0（移动到行头），^（移动到第一个非空格字符），$（移动到行尾）
- gg（移动到文件头），G（移动到文件尾）

在正常模式下，Vim支持删除命令。

- dd  删除一行
- x   删除一个字符

其他命令

- u（撤销）、ctrl+r（恢复）
- y/yank（复制）
- p（粘贴）
- c（修改）

命令模式
**********
在正常模式下输入 `:` 进入命令模式。在输入 `:` 后，光标会立即跳到屏幕下方 `:` 后。这个模式有很多功能，包括文件操作、字符串替换等。

- :q            退出
- :q!           强制退出
- :w            保存
- :wq           保存然后退出
- :e <文件名>    打开要编辑的文件
- :ls           显示打开的缓存
- :<line>       跳转到指定行
- :/{正则表达式}  根据正则表达式匹配字符串，n / N 用于导航匹配
- :%s/{目标字符串}/{字符串}/g    在整个文件中替换字符串
- :set {参数}    根据参数配置当前Vim窗口行为，如set number设置显示行号
- :help {标题}   打开标题相关的帮助文档，如 :help :wq 打开 :wq命令的帮助文档

插入模式
**********
在正常模式下输入 `i` 进入插入模式，插入模式下可向文件缓冲区输入字符修改编辑代码，在插入模式按 `<ESC>` 返回正常模式。

在正常模式下输入 `o` 在当前行下方新建一行并进入插入模式，输入 `O` 在当前行上方新建一行并进入插入模式。

可视模式
**********
在正常模式下输入 `v` 进入可视模式，可视模式里可选择文件缓冲区的内容。同类命令包括输入 `V` 进入可视模式并选中当前行，输入 `Ctrl+v` 切换到可视模式并选中矩形区域。

缓存、窗口和标签页
**********************
Vim打开的文件称为“缓存”，一个Vim会话包含一系列标签页，每个标签页包含一系列窗口（分隔面板）。每个窗口显示一个缓存。缓存和窗口不是一一对应的关系，窗口只是视角，一个缓存可以在多个窗口打开，甚至在同一个标签页内的多个窗口打开。Vim默认打开一个标签页，这个标签页包含一个窗口。在命令模式下输入 `sp <filename>` 可以在水平窗口中打开文件，输入 `vsp <filename>` 可以在垂直窗口中打开文件。打开多个窗口时可以使用 `Ctrl-b + h/j/k/l` 在不同窗口间跳转，关闭某个窗口时可在命令模式输入 `close` 。

扩展操作
---------
在Vim哲学中已经描述过Vim支持不同多个命令组合，比如 `dd` 删除行等，Vim还支持数字和命令结合，表示执行命令指定的操作若干次。

- 3w  向后移动3个词
- 5dd 删除5行  

Vim也支持用修饰语改变命令的意义，修饰语有 `i` ，表示“内部”或者“在内”， `a` 表示“周围”，例如：

- ci( 改变当前括号内的内容

在Vim中还有一个神奇的命令 `.` ，它的主要作用是重复上一个修改操作。这里修改操作主要指让文件缓冲区发生更新的操作，可以包括删除、修改等，对正常模式下的移动命令，由于其未更新文件缓冲区，所以使用点命令并不会重复移动命令。需要注意的是每次从正常模式进入插入模式，修改文件缓冲区后退回到正常模式，无论中间修改了多少字符都算一次修改操作。点命令是最简单的命令，然而又是减少重复操作最为有用的命令，可在实际使用的过程极大地提升工作效率。

自定义Vim及扩展
================
Vim支持通过一个名为 `~/.vimrc` 的配置文件个性化定制Vim的行为，可以通过查阅资料定制Vim，也可以参考Github一些发布的优秀配置。

Vim的扩展主要是通过插件的形式，插件使得Vim具有更强大的功能，更好编码体验。Vim有很多插件管理器包括 `vim-plug <https://github.com/junegunn/vim-plug>`_、 `pathogen <https://github.com/tpope/vim-pathogen>`_、 `vundle <https://github.com/VundleVim/Vundle.vim>`_ 和 `minpac <https://github.com/k-takata/minpac>`_ 等。在8.0版本之后，Vim自身也内置了一个插件管理系统，在使用时只需要创建一个 `~/.vim/pack/vendor/start` 的文件夹，然后把插件包放在该路径下Vim启动时就会自动加载插件（可以在目录下通过 `git clone <plugin_url>` 直接获取插件包），如果不想自动加载某些插件，需要创建一个 `~/.vim/pack/vendor/opt` 加对应的插件包放到该目录下，随后在 `~/.vimrc` 中使用 `packadd` 来手动加载插件，查看 `:help packages` 可获取更多相关信息。

使用插件时可选择一个根据其手册进行配置，推荐使用vim-plug或者Vim内置插件管理。

参考文件及扩展阅读
===================

Vim手册：https://www.vim.org/

